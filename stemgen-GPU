#!/bin/bash

# Exit on use of an uninitialized variable
# set -o nounset
# Exit if any statement returns a non-true return value (non-zero).
# set -o errexit

LOGO="
 _____ _____ _____ _____ _____ _____ _____ 
|   __|_   _|   __|     |   __|   __|   | |
|__   | | | |   __| | | |  |  |   __| | | |
|_____| |_| |_____|_|_|_|_____|_____|_|___|

"

SUPPORTED_SEPARATION_SOFTWARES=('demucs' 'spleeter')
SUPPORTED_FILES=('.wav' '.wave' '.aif' '.aiff' '.flac')
TOLERATED_FILES=('.opus' '.ogg' '.m4a' '.mp4' '.stem.m4a' '.stem.mp4')

USAGE="$LOGO
Stemgen is a Stem file generator. Convert any track into a stem and have fun with Traktor.

Usage: $0 -i [input_path] -o [output_path] -s [separation_software] -p [model_path] -c [crop_cover] 

Supported separation software: ${SUPPORTED_SEPARATION_SOFTWARES[@]}
Supported (lossless) input file format: ${SUPPORTED_FILES[@]}
Tolerated input file format: ${TOLERATED_FILES[@]}
"
VERSION=4.0.0

INPUT_PATH=
OUTPUT_PATH=output
MODEL_PATH=4stems-22kHz.json
CROP_COVER=false
BASE_PATH=
FILE_NAME=
FILE_EXTENSION=
SEPARATION_SOFTWARE=demucs
BIT_DEPTH=0

# From https://stackoverflow.com/a/53183593
DIR="$(dirname "${BASH_SOURCE[0]}")" # get the directory name
DIR="$(realpath "${DIR}")" # resolve its full path if need be

cd_root() {
    if [[ $DIR == *"/stemgen-droplet.app/"* ]]; then
        cd "$DIR"/../../../..
    else
        cd "$DIR"
    fi
}

get_cover() {
    echo "Extracting cover..."

    if [[ $FILE_EXTENSION == '.wav' ]] || [[ $FILE_EXTENSION == '.wave' ]]; then
        python3 ni-stem/extract_cover_art.py "$INPUT_PATH" "$OUTPUT_PATH/$FILE_NAME/cover.jpg"
        echo "Cover extracted from APIC tag."
    else
        ffmpeg -i "$INPUT_PATH" -an -vcodec copy "$OUTPUT_PATH/$FILE_NAME/cover.jpg" -y
        echo "Cover extracted with ffmpeg."
    fi

    if [[ $CROP_COVER == true ]]; then
        # https://legacy.imagemagick.org/Usage/thumbnails/#cut
        convert -define jpeg:size=720x720 "$OUTPUT_PATH/$FILE_NAME/cover.jpg" -thumbnail 720x720^ -gravity center -extent 720x720 "$OUTPUT_PATH/$FILE_NAME/cover.jpg"
        echo "Cover cropped."
    fi

    echo "Done."
}

get_metadata() {
    echo "Extracting metadata..."

    ffmpeg -i "$INPUT_PATH" -f ffmetadata "$OUTPUT_PATH/$FILE_NAME/metadata.txt" -y

    # Get label from TPUB tag
    if [[ $FILE_EXTENSION == '.wav' ]] || [[ $FILE_EXTENSION == '.wave' ]]; then
        python3 ni-stem/extract_label.py "$INPUT_PATH" "$OUTPUT_PATH/$FILE_NAME/metadata.txt"
    fi

    echo "Done."
}

get_bit_depth() {
    echo "Extracting bit depth..."

    if [[ $FILE_EXTENSION == '.flac' ]]; then
        BIT_DEPTH=$(ffprobe -show_streams -select_streams a "$INPUT_PATH" | grep bits_per_raw_sample= | sed 's/bits_per_raw_sample=//')
    else
        BIT_DEPTH=$(ffprobe -show_streams -select_streams a "$INPUT_PATH" | grep bits_per_sample= | sed 's/bits_per_sample=//')
    fi

    if [[ $BIT_DEPTH == 'N/A' ]]; then
        BIT_DEPTH=0
    fi

    echo "bits_per_sample=$BIT_DEPTH"

    echo "Done."
}

convert() {
    echo "Converting to wav and/or downsampling..."

    # We downsample to 44.1kHz to avoid problems with the separation software
    # because the models are trained on 44.1kHz audio files

    #  QUALITY            WIDTH  REJ dB   TYPICAL USE
    #  -v  very high      95%     175     24-bit mastering

    # -M/-I/-L     Phase response = minimum/intermediate/linear(default)
    # -s           Steep filter (band-width = 99%)
    # -a           Allow aliasing above the pass-band

    if [[ $FILE_EXTENSION == '.wav' ]] || [[ $FILE_EXTENSION == '.wave' ]] || [[ $FILE_EXTENSION == '.aif' ]] || [[ $FILE_EXTENSION == '.aiff' ]] || [[ $FILE_EXTENSION == '.flac' ]]; then
        if [[ $BIT_DEPTH == '32' ]]; then
            # Downconvert to 24-bit
            sox "$INPUT_PATH" --show-progress -b 24 "$OUTPUT_PATH/$FILE_NAME/$FILE_NAME.wav" rate -v -a -I -s 44100
            BIT_DEPTH=24
        else
            sox "$INPUT_PATH" --show-progress --no-dither "$OUTPUT_PATH/$FILE_NAME/$FILE_NAME.wav" rate -v -a -I -s 44100
        fi
    else
        # Note that we shouldn't have bit depth with the lossy files format
        # but this logic is here if you want to use ffmpeg instead of sox

        # The default ffmpeg behavior is to downsample wav files to 16-bit audio
        # so let's convert and dither with soxr instead for better quality

        CMD=""
        OPTION=""
        if [[ $BIT_DEPTH == 0 ]] || [[ $BIT_DEPTH == 16 ]]; then
            CMD="-ar"
            OPTION="44100"
        elif [[ $BIT_DEPTH == 24 ]] || [[ $BIT_DEPTH == 32 ]]; then
            CMD="-af"
            OPTION="aresample=44100:resampler=soxr:precision=33:osf=s16:dither_method=triangular"
        fi

        ffmpeg -i "$INPUT_PATH" "$CMD" "$OPTION" -map_metadata 0:s:0 "$OUTPUT_PATH/$FILE_NAME/$FILE_NAME.wav" -y
    fi

    echo "Done."
}

# TODO: handle multilines metadata
create_tags_json() {
    echo "Creating tags.json..."

    cd "$OUTPUT_PATH/$FILE_NAME"

    local path=$( cd "$(dirname "$FILE_NAME")" >/dev/null 2>&1 ; pwd -P )

    echo $path

    local tags=()

    # Add metadata, e.g. `artist` `genre`
    while read -r tag; do
        title=${tag%%=*}
        value=${tag##"$title="}
        title=$(echo "$title" | awk '{ print tolower($0) }')
        if [[ $title == "title" ]] || [[ $title == "style" ]] ||
            [[ $title == "artist" ]] || [[ $title == "remixer" ]] ||
            [[ $title == "release" ]] || [[ $title == "album" ]] ||
            [[ $title == "mix" ]] ||
            [[ $title == "producer" ]] || [[ $title == "bpm" ]] ||
            [[ $title == "genre" ]] || [[ $title == "catalog_no" ]] ||
            [[ $title == "track_no" ]] || [[ $title == "track_count" ]] ||
            [[ $title == "track" ]] || [[ $title == "date" ]] ||
            [[ $title == "year" ]] || [[ $title == "isrc" ]] ||
            [[ $title == "publisher" ]] || [[ $title == "label" ]] ||
            [[ $title == "comment" ]] || [[ $title == "description" ]] ||
            [[ $title == "url_discogs_artist_site" ]] ||
            [[ $title == "url_discogs_release_site" ]] ||
            [[ $title == "youtube_id" ]] || [[ $title == "beatport_id" ]] ||
            [[ $title == "qobuz_id" ]] || [[ $title == "copyright" ]] ||
            [[ $title == "initialkey" ]] || [[ $title == "key" ]] ||
            [[ $title == "barcode" ]] || [[ $title == "upc" ]] ||
            [[ $title == "lyrics" ]] || [[ $title == "mood" ]]; then
        tags+=("${title}=${value}")
        fi
    done < metadata.txt

    # Add `cover`
    if [[ -e "cover.jpg" ]]; then
        tags+=("cover=file://${path}/cover.jpg")
    fi

    jo -p -- "${tags[@]:-}" > tags.json

    cat tags.json

    cd ../../

    echo "Done."
}

split_song() {
    echo "Splitting song..."

    if [[ $SEPARATION_SOFTWARE == "spleeter" ]]; then
        spleeter separate "$INPUT_PATH" -p "$MODEL_PATH" -o "$OUTPUT_PATH"
    elif [[ $SEPARATION_SOFTWARE == "demucs" ]]; then
        if [[ $BIT_DEPTH == 24 ]]; then
            python3 -m demucs --int24 -n htdemucs_ft "$INPUT_PATH" -o "$OUTPUT_PATH/$FILE_NAME"
        else
            python3 -m demucs -n htdemucs_ft "$INPUT_PATH" -o "$OUTPUT_PATH/$FILE_NAME"
        fi
    else
        echo "Unknown separation software: $SEPARATION_SOFTWARE"
        exit 1
    fi

    echo "Done."
}

create_stem() {
    echo "Creating stem..."

    cd_root

    if [[ $SEPARATION_SOFTWARE == "spleeter" ]]; then
        ./ni-stem/ni-stem create -s "$OUTPUT_PATH/$FILE_NAME/drums.wav" "$OUTPUT_PATH/$FILE_NAME/bass.wav" "$OUTPUT_PATH/$FILE_NAME/other.wav" "$OUTPUT_PATH/$FILE_NAME/vocals.wav" -x "$OUTPUT_PATH/$FILE_NAME/$FILE_NAME.wav" -t "$OUTPUT_PATH/$FILE_NAME/tags.json" -m metadata.json -f alac
    elif [[ $SEPARATION_SOFTWARE == "demucs" ]]; then
        ./ni-stem/ni-stem create -s "$OUTPUT_PATH/$FILE_NAME/htdemucs_ft/$FILE_NAME/drums.wav" "$OUTPUT_PATH/$FILE_NAME/htdemucs_ft/$FILE_NAME/bass.wav" "$OUTPUT_PATH/$FILE_NAME/htdemucs_ft/$FILE_NAME/other.wav" "$OUTPUT_PATH/$FILE_NAME/htdemucs_ft/$FILE_NAME/vocals.wav" -x "$OUTPUT_PATH/$FILE_NAME/$FILE_NAME.wav" -t "$OUTPUT_PATH/$FILE_NAME/tags.json" -m metadata.json -f alac
    fi

    echo "Done."
}

clean_dir() {
    echo "Cleaning..."

    cd "$OUTPUT_PATH/$FILE_NAME"
    if [[ -f "$FILE_NAME.stem.m4a" ]]; then
        mv "$FILE_NAME.stem.m4a" ..
    else
        echo "Error."
        exit 2
    fi
    cd ..
    rm -rf "$FILE_NAME"

    echo "Done."
}

setup_file() {
    FILE_EXTENSION=$1
    FILE_NAME=${BASE_PATH%"$FILE_EXTENSION"}

    if [[ -d "$OUTPUT_PATH/$FILE_NAME" ]]; then
        echo "Working dir already created."
    else
        mkdir "$OUTPUT_PATH/$FILE_NAME"
        echo "Working dir created."
    fi
}

setup() {
    packages=('ffmpeg' 'sox' 'jo')
    if [[ $SEPARATION_SOFTWARE == "spleeter" ]]; then
        packages+=('spleeter')
    fi
    for package in "${packages[@]}"; do
        if [[ $(which $package) == "" ]]; then
            echo "Please install $package before running Stemgen."
            exit 2
        fi
    done

    if [[ $SEPARATION_SOFTWARE == "demucs" ]]; then
        if [[ $(python3 -m demucs -h) == "" ]]; then
            echo "Please install demucs before running Stemgen."
            exit 2
        fi
    fi

    if [[ $(./ni-stem/ni-stem -h) == "" ]]; then
        echo "Please install ni-stem before running Stemgen."
        exit 2
    fi

    if [[ -d $OUTPUT_PATH ]]; then
        echo "Output dir already created."
    else
        mkdir $OUTPUT_PATH
        echo "Output dir created."
    fi

    BASE_PATH=${INPUT_PATH##*/}

    case "$INPUT_PATH" in
        *.wave)
            setup_file .wave
            convert
            ;;
        *.wav)
            setup_file .wav
            convert
            ;;
        *.aiff)
            setup_file .aiff
            convert
            ;;
        *.aif)
            setup_file .aif
            convert
            ;;
        *.flac)
            setup_file .flac
            convert
            ;;
        *.stem.mp4)
            setup_file .stem.mp4
            convert
            ;;
        *.stem.m4a)
            setup_file .stem.m4a
            convert
            ;;
        *.m4a)
            setup_file .m4a
            convert
            ;;
        *.opus)
            setup_file .opus
            convert
            ;;
        *.ogg)
            setup_file .ogg
            convert
            ;;
        *)
            echo "Invalid input file format. File should be one of:" ${SUPPORTED_FILES[@]} ${TOLERATED_FILES[@]}
            exit 1
            ;;
    esac

    echo "Ready!"
}

run() {
    echo "Generating a Stem file for $FILE_NAME..."

    get_cover
    get_metadata
    get_bit_depth
    create_tags_json
    split_song
    create_stem
    clean_dir

    echo "Success! Have fun :)"
}

if [[ $DIR == *"/stemgen-droplet.app/"* ]]; then
    if [[ -d "$1" ]]; then
        for track in "$1"/*; do
            INPUT_PATH=$track
            cd_root && setup && run
        done
    else
        for track in "${@}"; do
            INPUT_PATH=$track
            cd_root && setup && run
        done
    fi
else
    while [[ "$1" =~ ^- && ! "$1" == "--" ]]; do case $1 in
        -V | --version)
            echo $VERSION
            exit 0
            ;;
        -o | --output)
            shift; OUTPUT_PATH=$1
            ;;
        -i | --input)
            shift; INPUT_PATH=$1
            ;;
        -p | --path)
            shift; MODEL_PATH=$1
            ;;
        -c | --crop-cover)
            shift; CROP_COVER=true
            ;;
        -s | --separation-software)
            shift; SEPARATION_SOFTWARE=$1
            ;;
        -h | --help)
            echo "$USAGE"
            exit 0
            ;;
        * )
            echo "$USAGE"
            exit 1
            ;;
    esac; shift; done
    if [[ "$1" == '--' ]]; then shift; fi

    cd_root && setup && run
fi
